---
const faqQuestions = [
  { id: 1, question: "Learn more about our company and team", href: "/about" },
  { id: 2, question: "View our portfolio and case studies", href: "/portfolio" }
];
---

<div class="faq-widget">
  <div class="faq-input-container">
    <input 
      type="text" 
      class="faq-input" 
      placeholder="Ask anything... (AI-powered) 🤖"
      aria-label="AI-powered search"
      id="faq-search"
      autocomplete="off"
    />
    <button class="faq-submit" aria-label="Submit question">
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
        <path d="M21 21L15 15M17 10C17 13.866 13.866 17 10 17C6.13401 17 3 13.866 3 10C3 6.13401 6.13401 3 10 3C13.866 3 17 6.13401 17 10Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>
  </div>
  
  <div class="faq-dropdown" id="faq-dropdown">
    <!-- AI Search Result -->
    <div class="ai-result" id="ai-result" style="display: none;">
      <div class="ai-result-content">
        <div class="ai-icon">🤖</div>
        <div class="ai-text">
          <p class="ai-title">AI found the best page for you!</p>
          <p class="ai-description" id="ai-description"></p>
        </div>
        <div class="ai-loader" id="ai-loader" style="display: none;">
          <div class="spinner"></div>
        </div>
      </div>
    </div>
    
    <ul class="faq-list">
      {faqQuestions.map((item) => (
        <li class="faq-item">
          <a href={item.href} class="faq-link" data-href={item.href}>
            <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
              <path d="M7.5 15L12.5 10L7.5 5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            {item.question}
          </a>
        </li>
      ))}
    </ul>
    <div class="faq-footer">
      <a href="/contact" class="faq-contact-link" data-contact-link>
        <span>Have a specific question? Contact us →</span>
      </a>
    </div>
  </div>
</div>

<style>
  .faq-widget {
    position: relative;
    max-width: 912px;
    width: 100%;
    z-index: 10001;
    isolation: isolate;
  }
  
  .faq-input-container {
    position: relative;
    display: flex;
    align-items: center;
    background: rgba(224, 224, 224, 0.8);
    border-radius: var(--radius-sm);
    overflow: hidden;
    transition: background-color var(--transition-base);
    max-width: 820px;
    z-index: 10002;
  }
  
  .faq-input-container:focus-within {
    background: rgba(224, 224, 224, 1);
  }
  
  .faq-input {
    flex: 1;
    padding: 0.875rem 1rem;
    border: none;
    background: transparent;
    font-family: var(--font-mono);
    font-size: 0.75rem;
    color: rgba(0, 0, 0, 0.87);
    outline: none;
    min-width: 0;
  }
  
  .faq-input::placeholder {
    color: rgba(0, 0, 0, 0.42);
  }
  
  .faq-submit {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 56px;
    height: 36px;
    background: transparent;
    border: none;
    border-left: 1px solid rgba(0, 0, 0, 0.1);
    color: var(--color-black);
    cursor: pointer;
    transition: color var(--transition-base);
  }
  
  .faq-submit:hover {
    color: var(--color-primary);
  }
  
  .faq-dropdown {
    position: absolute;
    top: calc(100% + 0.75rem);
    left: 0;
    transform: translateY(-8px) scale(0.96);
    width: 100%;
    max-width: 820px;
    background: var(--color-white);
    border-radius: 16px;
    box-shadow: 0px 12px 40px rgba(0, 0, 0, 0.25), 0px 4px 12px rgba(0, 0, 0, 0.15);
    opacity: 0;
    visibility: hidden;
    pointer-events: none;
    transition: opacity 0.25s cubic-bezier(0.4, 0, 0.2, 1), 
                transform 0.25s cubic-bezier(0.4, 0, 0.2, 1), 
                visibility 0.25s;
    z-index: 99999;
    overflow: hidden;
    border: 1px solid rgba(0, 0, 0, 0.06);
    isolation: isolate;
  }
  
  .faq-dropdown.open {
    opacity: 1;
    visibility: visible;
    pointer-events: auto;
    transform: translateY(0) scale(1);
    z-index: 99999 !important;
  }
  
  .faq-dropdown.open * {
    pointer-events: auto;
  }
  
  
  .faq-list {
    list-style: none;
    padding: 1rem;
    margin: 0;
    position: relative;
    z-index: 10;
  }
  
  .faq-item {
    margin-bottom: 0.625rem;
    position: relative;
    z-index: 20;
    cursor: pointer;
    isolation: isolate;
  }
  
  .faq-item:last-child {
    margin-bottom: 0;
  }
  
  .faq-item .faq-link:hover {
    background: var(--color-primary) !important;
    color: var(--color-white) !important;
    transform: translateX(4px) !important;
    box-shadow: 0 2px 8px rgba(0, 123, 255, 0.2) !important;
  }
  
  .faq-item .faq-link:hover svg {
    color: var(--color-white) !important;
    transform: translateX(3px) !important;
  }
  
  .faq-link {
    display: flex;
    align-items: center;
    gap: 0.625rem;
    padding: 1rem 1.125rem;
    color: var(--color-black);
    font-size: 0.8125rem;
    font-weight: 500;
    background: #f8f9fa;
    border-radius: 10px;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    border: 1px solid transparent;
    cursor: pointer !important;
    text-decoration: none;
    position: relative;
    z-index: 50;
    pointer-events: auto !important;
    width: 100%;
    box-sizing: border-box;
  }
  
  .faq-link svg {
    flex-shrink: 0;
    width: 16px;
    height: 16px;
    color: var(--color-primary);
    transition: all 0.2s ease;
    pointer-events: none !important;
  }
  
  .faq-link *,
  .faq-link > *,
  .faq-link svg,
  .faq-link svg *,
  .faq-link path,
  .faq-link text {
    pointer-events: none !important;
    user-select: none;
  }
  
  .faq-link:hover,
  a.faq-link:hover {
    background: var(--color-primary) !important;
    color: var(--color-white) !important;
    transform: translateX(4px) !important;
    border-color: var(--color-primary) !important;
    box-shadow: 0 2px 8px rgba(0, 123, 255, 0.2) !important;
  }
  
  .faq-link:active {
    transform: translateX(2px) !important;
  }
  
  .faq-link:hover svg,
  a.faq-link:hover svg {
    color: var(--color-white) !important;
    transform: translateX(3px) !important;
  }
  
  .faq-footer {
    padding: 1rem;
    text-align: center;
    border-top: 1px solid rgba(0, 0, 0, 0.06);
    background: #fafbfc;
    position: relative;
    z-index: 50;
    isolation: isolate;
    min-height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .faq-contact-link {
    display: inline-flex;
    align-items: center;
    gap: 0.375rem;
    padding: 0.75rem 1.5rem;
    font-size: 0.75rem;
    font-weight: 500;
    color: var(--color-text-gray);
    transition: all 0.2s ease;
    text-decoration: none;
    cursor: pointer !important;
    position: relative;
    z-index: 100;
    pointer-events: auto !important;
    background: transparent;
    border-radius: 8px;
  }
  
  .faq-contact-link:hover,
  a.faq-contact-link:hover {
    color: var(--color-primary) !important;
    gap: 0.5rem;
    text-decoration: underline;
    background: rgba(0, 145, 255, 0.05) !important;
  }
  
  .faq-contact-link * {
    pointer-events: none !important;
  }
  
  /* AI Result Styles */
  .ai-result {
    padding: 1.5rem;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-radius: 12px 12px 0 0;
    animation: slideDown 0.3s ease;
  }
  
  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .ai-result-content {
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  
  .ai-icon {
    font-size: 2rem;
    animation: bounce 0.6s ease infinite;
  }
  
  @keyframes bounce {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-5px); }
  }
  
  .ai-text {
    flex: 1;
  }
  
  .ai-title {
    font-weight: 600;
    font-size: 0.9375rem;
    margin-bottom: 0.25rem;
  }
  
  .ai-description {
    font-size: 0.8125rem;
    opacity: 0.9;
  }
  
  .ai-loader {
    display: flex;
    align-items: center;
  }
  
  .spinner {
    width: 24px;
    height: 24px;
    border: 3px solid rgba(255, 255, 255, 0.3);
    border-top-color: white;
    border-radius: 50%;
    animation: spin 0.8s linear infinite;
  }
  
  @keyframes spin {
    to { transform: rotate(360deg); }
  }
  
  @media (max-width: 1024px) {
    .faq-widget {
      max-width: 100%;
      z-index: 10001;
    }
    
    .faq-input-container {
      max-width: 100%;
      z-index: 10002;
    }
    
    .faq-dropdown {
      max-width: 100%;
      z-index: 99999;
    }
  }
  
  @media (max-width: 768px) {
    .faq-widget {
      z-index: 10001;
    }
    
    .faq-input-container {
      z-index: 10002;
    }
    
    .faq-dropdown {
      left: 0;
      right: 0;
      transform: translateY(-8px) scale(0.96);
      width: 100%;
      max-width: none;
      z-index: 99999;
    }
    
    .faq-dropdown.open {
      transform: translateY(0) scale(1);
    }
    
    .faq-list {
      padding: 0.875rem;
    }
    
    .faq-link {
      font-size: 0.875rem;
      padding: 0.875rem 1rem;
    }
    
    .ai-result {
      padding: 1.25rem;
    }
    
    .ai-title {
      font-size: 0.875rem;
    }
    
    .ai-description {
      font-size: 0.8125rem;
    }
  }
  
  @media (max-width: 480px) {
    .faq-widget {
      z-index: 10001;
    }
    
    .faq-input-container {
      margin: 0;
      z-index: 10002;
    }
    
    .faq-input {
      font-size: 0.8125rem;
      padding: 0.75rem 0.875rem;
    }
    
    .faq-submit {
      width: 50px;
    }
    
    .faq-dropdown {
      border-radius: 12px;
      z-index: 99999;
    }
    
    .faq-list {
      padding: 0.75rem;
    }
    
    .faq-link {
      font-size: 0.8125rem;
      padding: 0.75rem 0.875rem;
      gap: 0.5rem;
    }
    
    .ai-result {
      padding: 1rem;
      border-radius: 12px 12px 0 0;
    }
    
    .ai-icon {
      font-size: 1.75rem;
    }
  }
</style>

<script>
  // FAQ Widget functionality
  const faqInput = document.getElementById('faq-search') as HTMLInputElement;
  const faqDropdown = document.getElementById('faq-dropdown');
  const faqSubmit = document.querySelector('.faq-submit');
  
  // Open dropdown on input focus
  faqInput?.addEventListener('focus', () => {
    faqDropdown?.classList.add('open');
  });
  
  // Open dropdown on submit button click
  faqSubmit?.addEventListener('click', (e) => {
    e.preventDefault();
    e.stopPropagation();
    faqDropdown?.classList.toggle('open');
    if (faqDropdown?.classList.contains('open')) {
      faqInput?.focus();
    }
  });
  
  
  // Close dropdown when clicking outside ONLY
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    
    // Don't close if clicking inside the widget
    if (target.closest('.faq-widget')) {
      return;
    }
    
    // Clicking outside - close dropdown
    faqDropdown?.classList.remove('open');
  });
  
  // AI-powered search with beautiful feedback
  let searchTimeout: NodeJS.Timeout;
  let isSearching = false;
  const aiResult = document.getElementById('ai-result');
  const aiDescription = document.getElementById('ai-description');
  const aiLoader = document.getElementById('ai-loader');
  const faqList = document.querySelector('.faq-list');
  
  // Route descriptions
  const routeDescriptions: Record<string, string> = {
    '/about': 'Taking you to About Us page... 📖',
    '/services': 'Taking you to Our Services... 🛠️',
    '/portfolio': 'Taking you to Our Projects & Process... 💼',
    '/blog': 'Taking you to Blog Posts... 📝',
    '/contact': "Found the perfect answer! Let's talk... 📞"
  };
  
  faqInput?.addEventListener('input', async (e) => {
    const searchTerm = (e.target as HTMLInputElement).value.trim();
    
    // Clear previous timeout
    if (searchTimeout) {
      clearTimeout(searchTimeout);
    }
    
    // Hide AI result and show items if search is empty
    if (searchTerm.length === 0) {
      if (aiResult) aiResult.style.display = 'none';
      if (faqList) (faqList as HTMLElement).style.display = 'block';
      document.querySelectorAll('.faq-item').forEach((item) => {
        (item as HTMLElement).style.display = 'block';
      });
      return;
    }
    
    // Wait for user to stop typing (800ms debounce)
    searchTimeout = setTimeout(async () => {
      if (searchTerm.length < 3) return;
      
      console.log('🤖 AI analyzing:', searchTerm);
      isSearching = true;
      
      // Show loading state
      if (aiResult && aiLoader && aiDescription) {
        aiResult.style.display = 'block';
        aiLoader.style.display = 'flex';
        aiDescription.textContent = 'AI is analyzing your question...';
        if (faqList) (faqList as HTMLElement).style.display = 'none';
      }
      
      try {
        console.log('📤 Sending request:', { query: searchTerm });
        
        const response = await fetch('/api/ai-search', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({ query: searchTerm })
        });
        
        console.log('📡 Response status:', response.status);
        
        if (!response.ok) {
          const errorData = await response.json();
          console.error('Response error:', errorData);
          throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('✅ AI result:', data);
        
        if (data.path && aiLoader && aiDescription) {
          // Hide loader
          aiLoader.style.display = 'none';
          
          // Show result
          const description = routeDescriptions[data.path] || 'Redirecting...';
          aiDescription.textContent = description;
          
          // Navigate after showing the message
          setTimeout(() => {
            console.log(`🎯 Navigating to: ${data.path}`);
            window.location.href = data.path;
          }, 1500);
        }
        
      } catch (error) {
        console.error('❌ AI Search Error:', error);
        
        // Get error message
        const errorMessage = error instanceof Error 
          ? error.message 
          : 'Üzgünüz, bir hata oluştu. Lütfen tekrar deneyin.';
        
        if (aiLoader && aiDescription) {
          aiLoader.style.display = 'none';
          aiDescription.textContent = errorMessage;
        }
        
        // Show items again after error
        setTimeout(() => {
          if (aiResult) aiResult.style.display = 'none';
          if (faqList) (faqList as HTMLElement).style.display = 'block';
        }, 2500);
        
      } finally {
        isSearching = false;
      }
    }, 800);
  });
  
  // Handle keyboard navigation
  faqInput?.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      faqDropdown?.classList.remove('open');
    }
  });
  
  // Force manual navigation for FAQ links - NO CLONING VERSION
  let linksInitialized = false;
  
  const initLinks = () => {
    if (linksInitialized) {
      console.log('⚠️ Links already initialized, skipping...');
      return;
    }
    
    const allFaqLinks = document.querySelectorAll('.faq-link, .faq-contact-link');
    console.log('🔧 Initializing', allFaqLinks.length, 'links (ONE TIME ONLY)');
    
    allFaqLinks.forEach((link, index) => {
      const href = link.getAttribute('href');
      const linkText = link.textContent?.trim().substring(0, 25);
      console.log(`  ${index + 1}. [${linkText}] → ${href}`);
      
      // Force inline styles (no cloning!)
      (link as HTMLElement).style.pointerEvents = 'auto';
      
      // Different styles for faq-link vs faq-contact-link
      if (link.classList.contains('faq-link')) {
        (link as HTMLElement).style.display = 'flex';
        (link as HTMLElement).style.width = '100%';
      } else if (link.classList.contains('faq-contact-link')) {
        (link as HTMLElement).style.display = 'inline-flex';
      }
      
      (link as HTMLElement).style.cursor = 'pointer';
      
      // Disable pointer events on all children
      const children = link.querySelectorAll('*');
      children.forEach(child => {
        (child as HTMLElement).style.pointerEvents = 'none';
        (child as HTMLElement).style.userSelect = 'none';
      });
      
      // Navigation function
      const navigate = (eventType: string) => {
        console.log(`✅ ${eventType} on Link ${index + 1}:`, href);
        if (href) {
          console.log('🚀 Navigating to:', href);
          window.location.href = href;
        }
      };
      
      // Click event (capture phase)
      link.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        e.stopImmediatePropagation();
        navigate('CLICK');
      }, { capture: true });
      
      // Mousedown for debugging
      link.addEventListener('mousedown', (e) => {
        console.log(`🖱️ MOUSEDOWN ${index + 1}`);
      });
      
      // Mouseenter for debugging
      link.addEventListener('mouseenter', (e) => {
        console.log(`🎯 HOVER ${index + 1}`);
      });
      
      // Touch support
      link.addEventListener('touchend', (e) => {
        e.preventDefault();
        e.stopPropagation();
        navigate('TOUCH');
      }, { capture: true });
    });
    
    linksInitialized = true;
    console.log('✅ All links initialized (will not reinitialize)');
  };
  
  // Initialize only once when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      setTimeout(initLinks, 500);
    });
  } else {
    setTimeout(initLinks, 500);
  }
</script>
